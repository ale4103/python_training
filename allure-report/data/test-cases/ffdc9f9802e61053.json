{
  "uid" : "ffdc9f9802e61053",
  "name" : "test_add_group[None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA']",
  "fullName" : "test.test_add_group#test_add_group[None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA']",
  "historyId" : "5c836bd4cffd3f4052b1d75288a65320",
  "time" : {
    "start" : 1558104573565,
    "stop" : 1558104574954,
    "duration" : 1389
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert [4:fsdfdsf:ds...q:qwerty, ...] == [4:fsdfdsf:dsf...q:qwerty, ...]\n  Left contains more items, first extra item: None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA'\n  Use -v to get the full diff",
  "statusTrace" : "app = <fixture.application.Application object at 0x03C4BF50>\ndb = <fixture.db.DbFixture object at 0x03C26FD0>\njson_groups = None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA'\ncheck_ui = False\n\n    def test_add_group(app, db, json_groups, check_ui):\n        group = json_groups\n        with allure.step('Given a group list'):\n            old_groups = db.get_group_list()\n        with allure.step(\"When I add a group %s to the list\" % group):\n            app.group.create(group)\n        with allure.step('Then the new group list is equal to the old list with the added group'):\n            new_groups = db.get_group_list()\n            old_groups.append(group)\n>           assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE           AssertionError: assert [4:fsdfdsf:ds...q:qwerty, ...] == [4:fsdfdsf:dsf...q:qwerty, ...]\nE             Left contains more items, first extra item: None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA'\nE             Use -v to get the full diff\n\ntest\\test_add_group.py:15: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db",
    "time" : {
      "start" : 1558104555418,
      "stop" : 1558104555442,
      "duration" : 24
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "stop",
    "time" : {
      "start" : 1558104555418,
      "stop" : 1558104555418,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "app",
    "time" : {
      "start" : 1558104573488,
      "stop" : 1558104573564,
      "duration" : 76
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "check_ui",
    "time" : {
      "start" : 1558104573564,
      "stop" : 1558104573564,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert [4:fsdfdsf:ds...q:qwerty, ...] == [4:fsdfdsf:dsf...q:qwerty, ...]\n  Left contains more items, first extra item: None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA'\n  Use -v to get the full diff",
    "statusTrace" : "app = <fixture.application.Application object at 0x03C4BF50>\ndb = <fixture.db.DbFixture object at 0x03C26FD0>\njson_groups = None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA'\ncheck_ui = False\n\n    def test_add_group(app, db, json_groups, check_ui):\n        group = json_groups\n        with allure.step('Given a group list'):\n            old_groups = db.get_group_list()\n        with allure.step(\"When I add a group %s to the list\" % group):\n            app.group.create(group)\n        with allure.step('Then the new group list is equal to the old list with the added group'):\n            new_groups = db.get_group_list()\n            old_groups.append(group)\n>           assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE           AssertionError: assert [4:fsdfdsf:ds...q:qwerty, ...] == [4:fsdfdsf:dsf...q:qwerty, ...]\nE             Left contains more items, first extra item: None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA'\nE             Use -v to get the full diff\n\ntest\\test_add_group.py:15: AssertionError",
    "steps" : [ {
      "name" : "Given a group list",
      "time" : {
        "start" : 1558104573566,
        "stop" : 1558104573571,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "When I add a group None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA' to the list",
      "time" : {
        "start" : 1558104573571,
        "stop" : 1558104574945,
        "duration" : 1374
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Then the new group list is equal to the old list with the added group",
      "time" : {
        "start" : 1558104574945,
        "stop" : 1558104574953,
        "duration" : 8
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert [4:fsdfdsf:ds...q:qwerty, ...] == [4:fsdfdsf:dsf...q:qwerty, ...]\n  Left contains more items, first extra item: None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA'\n  Use -v to get the full diff\n",
      "statusTrace" : "  File \"C:\\WORK5\\python_training\\test\\test_add_group.py\", line 15, in test_add_group\n    assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "db::fin",
    "time" : {
      "start" : 1558104580580,
      "stop" : 1558104580581,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "stop::fin",
    "time" : {
      "start" : 1558104580583,
      "stop" : 1558104584310,
      "duration" : 3727
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_add_group"
  }, {
    "name" : "host",
    "value" : "WS-A_IVANOV"
  }, {
    "name" : "thread",
    "value" : "11920-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_add_group"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "json_groups",
    "value" : "None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ffdc9f9802e61053.json",
  "parameterValues" : [ "None:name:headerxR>K.N}vyTdZO?w|:footer/Wxy{q0BoA'" ]
}